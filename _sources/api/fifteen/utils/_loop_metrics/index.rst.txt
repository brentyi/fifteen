:orphan:

:mod:`fifteen.utils._loop_metrics`
==================================

.. py:module:: fifteen.utils._loop_metrics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   fifteen.utils._loop_metrics.LoopMetrics



Functions
~~~~~~~~~

.. autoapisummary::

   fifteen.utils._loop_metrics.range_with_metrics
   fifteen.utils._loop_metrics.loop_metric_generator



Attributes
~~~~~~~~~~

.. autoapisummary::

   fifteen.utils._loop_metrics.generator


.. class:: LoopMetrics

   .. attribute:: counter
      :annotation: :int

      

   .. attribute:: iterations_per_sec
      :annotation: :float

      

   .. attribute:: time_elapsed
      :annotation: :float

      


.. function:: range_with_metrics(stop: int, /) -> fifteen.data.SizedIterable[LoopMetrics]
              range_with_metrics(start: int, stop: int, /) -> fifteen.data.SizedIterable[LoopMetrics]
              range_with_metrics(start: int, stop: int, step: int, /) -> fifteen.data.SizedIterable[LoopMetrics]

   Light wrapper for ``fifteen.utils.loop_metric_generator()``\ , for use in place of
   ``range()``. Yields a LoopMetrics object instead of an integer.


.. function:: loop_metric_generator() -> Generator[LoopMetrics, None, None]

   Generator for computing loop metrics.

   Note that the first ``iteration_per_sec`` metric will be 0.0.

   Example usage:

   .. code-block::

      # Note that this is an infinite loop.
      for metric in loop_metric_generator():
          time.sleep(1.0)
          print(metric)

   or:

   .. code-block::

      loop_metrics = loop_metric_generator()
      while True:
          time.sleep(1.0)
          print(next(loop_metrics).iterations_per_sec)


.. data:: generator
   

   

