:mod:`fifteen.utils`
====================

.. py:module:: fifteen.utils


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   fifteen.utils.LoopMetrics



Functions
~~~~~~~~~

.. autoapisummary::

   fifteen.utils.diff_dict_from_dataclasses
   fifteen.utils.flattened_dict_from_dataclass
   fifteen.utils.get_git_commit_hash
   fifteen.utils.get_git_diff
   fifteen.utils.hcb_print
   fifteen.utils.loop_metric_generator
   fifteen.utils.range_with_metrics
   fifteen.utils.pdb_safety_net
   fifteen.utils.stopwatch
   fifteen.utils.timestamp



.. function:: diff_dict_from_dataclasses(base: T, target: T) -> Dict[str, Any]


.. function:: flattened_dict_from_dataclass(dataclass: Any) -> Dict[str, Any]


.. function:: get_git_commit_hash(cwd: Optional[pathlib.Path] = None) -> str

   Returns the current Git commit hash.


.. function:: get_git_diff(cwd: Optional[pathlib.Path] = None) -> str

   Returns the output of ``git diff HEAD``.


.. function:: hcb_print(string_from_args: Callable[Ellipsis, str], *args: Any, **kwargs: Any) -> None

   Helper for printing via a host callback. JIT-friendly!


.. class:: LoopMetrics

   .. attribute:: counter
      :annotation: :int

      

   .. attribute:: iterations_per_sec
      :annotation: :float

      

   .. attribute:: time_elapsed
      :annotation: :float

      


.. function:: loop_metric_generator() -> Generator[LoopMetrics, None, None]

   Generator for computing loop metrics.

   Note that the first ``iteration_per_sec`` metric will be 0.0.

   Example usage:

   .. code-block::

      # Note that this is an infinite loop.
      for metric in loop_metric_generator():
          time.sleep(1.0)
          print(metric)

   or:

   .. code-block::

      loop_metrics = loop_metric_generator()
      while True:
          time.sleep(1.0)
          print(next(loop_metrics).iterations_per_sec)


.. function:: range_with_metrics(stop: int, /) -> fifteen.data.SizedIterable[LoopMetrics]
              range_with_metrics(start: int, stop: int, /) -> fifteen.data.SizedIterable[LoopMetrics]
              range_with_metrics(start: int, stop: int, step: int, /) -> fifteen.data.SizedIterable[LoopMetrics]

   Light wrapper for ``fifteen.utils.loop_metric_generator()``\ , for use in place of
   ``range()``. Yields a LoopMetrics object instead of an integer.


.. function:: pdb_safety_net() -> None

   Attaches a "safety net" for unexpected errors in a Python script.

   When called, PDB will be automatically opened when either (a) the user hits Ctrl+C
   or (b) we encounter an uncaught exception. Helpful for bypassing minor errors,
   diagnosing problems, and rescuing unsaved models.

   Approximately emulates launching a script via
   ``python -m pdb -c continue script_name.py``.


.. function:: stopwatch(label: str = 'block') -> Generator[None, None, None]

   Helper for printing the runtime of a block of code.

   Example:

   .. code-block::

      with fifteen.utils.stopwatch("name"):
          time.sleep(1.0)

   :param label: Label for block that's running.
   :type label: str

   :returns: *Generator* -- Context manager to place in ``with`` statement.


.. function:: timestamp() -> str

   Get a current timestamp as a string. Example format: ``2021-11-05-15:46:32``.


